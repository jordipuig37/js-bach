# Generated from JSBach.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,212,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,1,0,1,0,1,0,1,0,1,0,5,0,77,8,0,10,0,12,0,
        80,9,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,
        4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,
        1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
        1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
        1,17,1,17,1,17,1,18,4,18,142,8,18,11,18,12,18,143,1,19,1,19,1,20,
        1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,3,25,166,8,25,1,26,1,26,1,27,1,27,1,28,1,28,
        1,28,1,29,1,29,1,29,1,29,5,29,179,8,29,10,29,12,29,182,9,29,1,30,
        1,30,1,30,1,30,5,30,188,8,30,10,30,12,30,191,9,30,1,31,1,31,5,31,
        195,8,31,10,31,12,31,198,9,31,1,31,1,31,1,32,1,32,1,33,1,33,1,34,
        4,34,207,8,34,11,34,12,34,208,1,34,1,34,2,78,196,0,35,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,1,0,8,2,0,
        60,60,62,62,1,0,65,71,1,0,48,56,1,0,97,122,1,0,65,90,2,0,65,90,97,
        122,1,0,48,57,2,0,10,10,32,32,225,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
        0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
        0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,
        0,0,0,67,1,0,0,0,0,69,1,0,0,0,1,71,1,0,0,0,3,87,1,0,0,0,5,90,1,0,
        0,0,7,93,1,0,0,0,9,95,1,0,0,0,11,97,1,0,0,0,13,99,1,0,0,0,15,101,
        1,0,0,0,17,103,1,0,0,0,19,105,1,0,0,0,21,108,1,0,0,0,23,112,1,0,
        0,0,25,116,1,0,0,0,27,120,1,0,0,0,29,126,1,0,0,0,31,129,1,0,0,0,
        33,134,1,0,0,0,35,137,1,0,0,0,37,141,1,0,0,0,39,145,1,0,0,0,41,147,
        1,0,0,0,43,149,1,0,0,0,45,151,1,0,0,0,47,153,1,0,0,0,49,155,1,0,
        0,0,51,165,1,0,0,0,53,167,1,0,0,0,55,169,1,0,0,0,57,171,1,0,0,0,
        59,174,1,0,0,0,61,183,1,0,0,0,63,192,1,0,0,0,65,201,1,0,0,0,67,203,
        1,0,0,0,69,206,1,0,0,0,71,72,5,126,0,0,72,73,5,126,0,0,73,74,5,126,
        0,0,74,78,1,0,0,0,75,77,9,0,0,0,76,75,1,0,0,0,77,80,1,0,0,0,78,79,
        1,0,0,0,78,76,1,0,0,0,79,81,1,0,0,0,80,78,1,0,0,0,81,82,5,126,0,
        0,82,83,5,126,0,0,83,84,5,126,0,0,84,85,1,0,0,0,85,86,6,0,0,0,86,
        2,1,0,0,0,87,88,5,124,0,0,88,89,5,58,0,0,89,4,1,0,0,0,90,91,5,58,
        0,0,91,92,5,124,0,0,92,6,1,0,0,0,93,94,5,123,0,0,94,8,1,0,0,0,95,
        96,5,125,0,0,96,10,1,0,0,0,97,98,5,40,0,0,98,12,1,0,0,0,99,100,5,
        41,0,0,100,14,1,0,0,0,101,102,5,91,0,0,102,16,1,0,0,0,103,104,5,
        93,0,0,104,18,1,0,0,0,105,106,5,60,0,0,106,107,5,45,0,0,107,20,1,
        0,0,0,108,109,5,60,0,0,109,110,5,33,0,0,110,111,5,62,0,0,111,22,
        1,0,0,0,112,113,5,60,0,0,113,114,5,63,0,0,114,115,5,62,0,0,115,24,
        1,0,0,0,116,117,5,60,0,0,117,118,5,58,0,0,118,119,5,62,0,0,119,26,
        1,0,0,0,120,121,5,119,0,0,121,122,5,104,0,0,122,123,5,105,0,0,123,
        124,5,108,0,0,124,125,5,101,0,0,125,28,1,0,0,0,126,127,5,105,0,0,
        127,128,5,102,0,0,128,30,1,0,0,0,129,130,5,101,0,0,130,131,5,108,
        0,0,131,132,5,115,0,0,132,133,5,101,0,0,133,32,1,0,0,0,134,135,5,
        60,0,0,135,136,5,60,0,0,136,34,1,0,0,0,137,138,5,56,0,0,138,139,
        5,60,0,0,139,36,1,0,0,0,140,142,3,67,33,0,141,140,1,0,0,0,142,143,
        1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,38,1,0,0,0,145,146,5,
        94,0,0,146,40,1,0,0,0,147,148,5,42,0,0,148,42,1,0,0,0,149,150,5,
        47,0,0,150,44,1,0,0,0,151,152,5,43,0,0,152,46,1,0,0,0,153,154,5,
        45,0,0,154,48,1,0,0,0,155,156,5,37,0,0,156,50,1,0,0,0,157,166,5,
        61,0,0,158,159,5,47,0,0,159,166,5,61,0,0,160,166,7,0,0,0,161,162,
        5,60,0,0,162,166,5,61,0,0,163,164,5,62,0,0,164,166,5,61,0,0,165,
        157,1,0,0,0,165,158,1,0,0,0,165,160,1,0,0,0,165,161,1,0,0,0,165,
        163,1,0,0,0,166,52,1,0,0,0,167,168,5,35,0,0,168,54,1,0,0,0,169,170,
        7,1,0,0,170,56,1,0,0,0,171,172,7,1,0,0,172,173,7,2,0,0,173,58,1,
        0,0,0,174,180,7,3,0,0,175,179,3,65,32,0,176,179,3,67,33,0,177,179,
        5,95,0,0,178,175,1,0,0,0,178,176,1,0,0,0,178,177,1,0,0,0,179,182,
        1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,60,1,0,0,0,182,180,1,
        0,0,0,183,189,7,4,0,0,184,188,3,65,32,0,185,188,3,67,33,0,186,188,
        5,95,0,0,187,184,1,0,0,0,187,185,1,0,0,0,187,186,1,0,0,0,188,191,
        1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,62,1,0,0,0,191,189,1,
        0,0,0,192,196,5,34,0,0,193,195,9,0,0,0,194,193,1,0,0,0,195,198,1,
        0,0,0,196,197,1,0,0,0,196,194,1,0,0,0,197,199,1,0,0,0,198,196,1,
        0,0,0,199,200,5,34,0,0,200,64,1,0,0,0,201,202,7,5,0,0,202,66,1,0,
        0,0,203,204,7,6,0,0,204,68,1,0,0,0,205,207,7,7,0,0,206,205,1,0,0,
        0,207,208,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,210,1,0,0,
        0,210,211,6,34,0,0,211,70,1,0,0,0,10,0,78,143,165,178,180,187,189,
        196,208,1,6,0,0
    ]

class JSBachLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    LINE_COMMENT = 1
    OPENKEY = 2
    CLOSEKEY = 3
    OPENLIST = 4
    CLOSELIST = 5
    OPENPARENTHESIS = 6
    CLOSEPARENTHESIS = 7
    OPENBRACKET = 8
    CLOSEBRACKET = 9
    ASSIG = 10
    WRITE = 11
    READ = 12
    REPR = 13
    WHILE = 14
    IF = 15
    ELSE = 16
    APPEND = 17
    CUT = 18
    NUM = 19
    POWER = 20
    STAR = 21
    DIV = 22
    PLUS = 23
    MINUS = 24
    MOD = 25
    RELATION = 26
    LEN = 27
    BASE_NOTE = 28
    NOTE_OCTAVE = 29
    VAR_ID = 30
    PROC_ID = 31
    STRING = 32
    LETTER = 33
    DIGIT = 34
    WS = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'|:'", "':|'", "'{'", "'}'", "'('", "')'", "'['", "']'", "'<-'", 
            "'<!>'", "'<?>'", "'<:>'", "'while'", "'if'", "'else'", "'<<'", 
            "'8<'", "'^'", "'*'", "'/'", "'+'", "'-'", "'%'", "'#'" ]

    symbolicNames = [ "<INVALID>",
            "LINE_COMMENT", "OPENKEY", "CLOSEKEY", "OPENLIST", "CLOSELIST", 
            "OPENPARENTHESIS", "CLOSEPARENTHESIS", "OPENBRACKET", "CLOSEBRACKET", 
            "ASSIG", "WRITE", "READ", "REPR", "WHILE", "IF", "ELSE", "APPEND", 
            "CUT", "NUM", "POWER", "STAR", "DIV", "PLUS", "MINUS", "MOD", 
            "RELATION", "LEN", "BASE_NOTE", "NOTE_OCTAVE", "VAR_ID", "PROC_ID", 
            "STRING", "LETTER", "DIGIT", "WS" ]

    ruleNames = [ "LINE_COMMENT", "OPENKEY", "CLOSEKEY", "OPENLIST", "CLOSELIST", 
                  "OPENPARENTHESIS", "CLOSEPARENTHESIS", "OPENBRACKET", 
                  "CLOSEBRACKET", "ASSIG", "WRITE", "READ", "REPR", "WHILE", 
                  "IF", "ELSE", "APPEND", "CUT", "NUM", "POWER", "STAR", 
                  "DIV", "PLUS", "MINUS", "MOD", "RELATION", "LEN", "BASE_NOTE", 
                  "NOTE_OCTAVE", "VAR_ID", "PROC_ID", "STRING", "LETTER", 
                  "DIGIT", "WS" ]

    grammarFileName = "JSBach.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


